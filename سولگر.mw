{{Redirect5|Computer technology|the company|Computer Technology Limited|other uses|Computer (disambiguation)}}
{{pp-semi-indef}}{{pp-move-indef}}
{{Very long|date=June 2009}}
[[File:Columbia Supercomputer - NASA Advanced Supercomputing Facility.jpg|240px|thumb|The [[Columbia (supercomputer)|Columbia Supercomputer]], located at the [[NASA Ames Research Center]].]]

A '''computer''' is a [[machine]] that manipulates [[Data (computing)|data]] according to a set of [[Source code|instructions]].

Although mechanical examples of computers have existed through much of recorded human history, the first electronic computers were developed in the mid-20th century (1940–1945). These were the size of a large room, consuming as much power as several hundred modern personal computers ([[Personal computer|PCs]]).<ref>In 1946, [[ENIAC]] required an estimated 174&nbsp;kW. By comparison, a modern [[laptop]] computer may use around 30&nbsp;W; nearly six thousand times less.
{{cite web
|url=http://www.upenn.edu/computing/provider/docs/hardware/powerusage.html
|title=Approximate Desktop & Notebook Power Usage
|publisher=University of Pennsylvania
|accessdate=2009-06-20}}</ref> Modern computers based on [[integrated circuit]]s are millions to billions of times more capable than the early machines, and occupy a fraction of the space.<ref>Early computers such as [[Colossus computer|Colossus]] and [[ENIAC]] were able to process between 5 and 100 operations per second.

A modern "commodity" microprocessor (as of 2007) can process billions of operations per second, and many of these operations are more complicated and useful than early computer operations.
{{cite web
|url=http://www.intel.com/cd/channel/reseller/asmo-na/eng/products/mobile/processors/core2duo_m/feature/index.htm
|title=Intel® Core™2 Duo Mobile Processor: Features
|publisher=Intel Corporation
|accessdate=2009-06-20}}</ref> Simple computers are small enough to fit into a [[Watch|wristwatch]], and can be powered by a [[Button cell|watch battery]]. [[Personal computer]]s in their various forms are [[icon]]s of the [[Information Age]] and are what most people think of as "computers". The [[embedded system|embedded computer]]s found in many devices from [[Digital audio player|MP3 player]]s to [[fighter aircraft]] and from [[toy]]s to [[industrial robot]]s are however the most numerous.

The ability to store and execute lists of instructions called [[Computer program|programs]] makes computers extremely versatile, distinguishing them from [[calculator]]s. The [[Church–Turing thesis]] is a mathematical statement of this versatility: any computer with a certain minimum capability is, in principle, capable of performing the same tasks that any other computer can perform. Therefore computers ranging from a [[mobile phone]] to a [[supercomputer]] are all able to perform the same computational tasks, given enough time and storage capacity.

==د سولګر مخينه==

[[File:Jacquard.loom.full.view.jpg|thumb|The [[Jacquard loom]], on display at the [[Museum of Science and Industry in Manchester]], [[England]], was one of the first programmable devices.]]

The first use of the word "computer" was recorded in 1613, referring to a person who carried out calculations, or computations, and the word continued to be used in that sense until the middle of the 20th century. From the end of the 19th century onwards though, the word began to take on its more familiar meaning, describing a machine that carries out computations.<ref name=OEDComputer>{{citation |title=computer, ''n.'' |series=Oxford English Dictionary |url=http://dictionary.oed.com/ |publisher=Oxford University Press |edition=2 |year=1989 |accessdate=2009-04-10}}</ref>

The history of the modern computer begins with two separate technologies—automated calculation and programmability—but no single device can be identified as the earliest computer, partly because of the inconsistent application of that term. Examples of early mechanical calculating devices include the [[abacus]], the [[slide rule]] and arguably the [[astrolabe]] and the [[Antikythera mechanism]] (which dates from about 150–100 BC). [[Hero of Alexandria]] (c. 10–70 AD) built a mechanical theater which performed a play lasting 10&nbsp;minutes and was operated by a complex system of ropes and drums that might be considered to be a means of deciding which parts of the mechanism performed which actions and when.<ref>{{cite web
| url=http://www.mlahanas.de/Greeks/HeronAlexandria2.htm
| title=Heron of Alexandria
| accessdate=2008-01-15
}}</ref> This is the essence of programmability.

The "castle clock", an [[astronomical clock]] invented by [[Al-Jazari]] in 1206, is considered to be the earliest [[Computer programming|programmable]] [[analog computer]].<ref name="Ancient Discoveries">{{citation|title=[[Ancient Discoveries]], Episode 11: Ancient Robots|publisher=[[History (TV channel)|History Channel]]|url=http://www.youtube.com/watch?v=rxjbaQl0ad8|accessdate=2008-09-06}}</ref> It displayed the [[zodiac]], the [[Heliocentric orbit|solar]] and [[lunar orbit]]s, a [[Lunar phase|crescent moon]]-shaped [[Pointer (computing)|pointer]] travelling across a gateway causing [[Gate operator|automatic doors]] to open every [[hour]],<ref>Howard R. Turner (1997), ''Science in Medieval Islam: An Illustrated Introduction'', p. 184, [[University of Texas Press]], ISBN 0-292-78149-0</ref><ref name=Hill2>[[Donald Routledge Hill]], "Mechanical Engineering in the Medieval Near East", ''Scientific American'', May 1991, pp. 64-9 ([[cf.]] [[Donald Routledge Hill]], [http://home.swipnet.se/islam/articles/HistoryofSciences.htm Mechanical Engineering])</ref> and five [[robot]]ic musicians who played music when struck by [[lever]]s operated by a [[camshaft]] attached to a [[water wheel]]. The length of [[Daytime (astronomy)|day]] and [[night]] could be re-programmed to compensate for the changing lengths of day and night throughout the year.<ref name="Ancient Discoveries"/>

The [[Renaissance]] saw a re-invigoration of European mathematics and engineering. [[Wilhelm Schickard]]'s 1623 device was the first of a number of mechanical calculators constructed by European engineers, but none fit the modern definition of a computer, because they could not be programmed.

In 1801, [[Joseph Marie Jacquard]] made an improvement to the [[loom|textile loom]] by introducing a series of [[punched card|punched paper cards]] as a template which allowed his loom to weave intricate patterns automatically. The resulting Jacquard loom was an important step in the development of computers because the use of punched cards to define woven patterns can be viewed as an early, albeit limited, form of programmability.

It was the fusion of automatic calculation with programmability that produced the first recognizable computers. In 1837, [[Charles Babbage]] was the first to conceptualize and design a fully programmable mechanical computer, his [[analytical engine]].<ref>The analytical engine should not be confused with Babbage's [[difference engine]] which was a non-programmable mechanical calculator.</ref> Limited finances and Babbage's inability to resist tinkering with the design meant that the device was never completed.

In the late 1880s, Herman Hollerith invented the recording of data on a machine readable medium. Prior uses of machine readable media, above, had been for control, not data. "After some initial trials with paper tape, he settled on punched cards&nbsp;..."<ref>[http://www.columbia.edu/acis/history/hollerith.html Columbia University Computing History: Herman Hollerith]</ref> To process these punched cards he invented the [[tabulating machine|tabulator]], and the [[keypunch]] machines. These three inventions were the foundation of the modern information processing industry. Large-scale automated data processing of punched cards was performed for the [[1890 United States Census]] by Hollerith's company, which later became the core of [[IBM]]. By the end of the 19th century a number of technologies that would later prove useful in the realization of practical computers had begun to appear: the [[punched card]], [[Boolean algebra (logic)|Boolean algebra]], the [[vacuum tube]] (thermionic valve) and the [[teleprinter]].

During the first half of the 20th century, many scientific [[computing]] needs were met by increasingly sophisticated [[analog computer]]s, which used a direct mechanical or [[electricity|electrical]] model of the problem as a basis for [[computation]]. However, these were not programmable and generally lacked the versatility and accuracy of modern digital computers.

[[Alan Turing]] is widely regarded to be the father of modern [[computer science]]. In 1936 Turing provided an influential formalisation of the concept of the [[algorithm]] and computation with the [[Turing machine]]. Of his role in the modern computer, ''[[Time (magazine)|Time]]'' Magazine in naming Turing one of the [[Time 100: The Most Important People of the Century|100 most influential]] people of the 20th century, states: ''"The fact remains that everyone who taps at a keyboard, opening a spreadsheet or a word-processing program, is working on an incarnation of a Turing machine."'' <ref>{{cite web
| title       = Alan Turing - Time 100 People of the Century
| url         = http://www.time.com/time/time100/scientist/profile/turing.html
| publisher   = ''[[Time]]''
| accessdate  = 2009-06-13
| quote       = The fact remains that everyone who taps at a keyboard, opening a spreadsheet or a word-processing program, is working on an incarnation of a Turing machine}}</ref>

The inventor of the program-controlled computer was [[Konrad Zuse]], who built the first working computer in 1941 and later in 1955 the first computer based on magnetic storage.<ref>[http://www.spiegel.de/netzwelt/gadgets/0,1518,651776,00.html Spiegel: The inventor of the computer's biography was published]</ref>

[[George Stibitz]] is internationally recognized as a father of the modern digital computer. While working at Bell Labs in November 1937, Stibitz invented and built a relay-based calculator he dubbed the "Model K" (for "kitchen table", on which he had assembled it), which was the first to use [[Binary numeral system|binary]] circuits to perform [[Adder (electronics)|an arithmetic operation]]. Later models added greater sophistication including complex arithmetic and programmability.<ref>{{cite web|title=Inventor Profile: George R. Stibitz|publisher=National Inventors Hall of Fame Foundation, Inc.|url=http://www.invent.org/hall_of_fame/140.html}}</ref>

{{Early computer characteristics}}

A succession of steadily more powerful and flexible [[computing]] devices were constructed in the 1930s and 1940s, gradually adding the key features that are seen in modern computers. The use of digital electronics (largely invented by [[Claude Shannon]] in 1937) and more flexible programmability were vitally important steps, but defining one point along this road as "the first digital electronic computer" is difficult.{{Ref|shannon1940|Shannon 1940|a}} Notable achievements include:

[[File:EDSAC (10).jpg|thumb|right|200px|[[Electronic Delay Storage Automatic Calculator|EDSAC]] was one of the first computers to implement the stored program ([[von Neumann architecture|von Neumann]]) architecture.]]
[[File:80486dx2-large.jpg|thumb|right|200px|[[Die (integrated circuit)|Die]] of an [[Intel 80486DX2]] [[microprocessor]] (actual size: 12×6.75&nbsp;mm) in its packaging.]]

* [[Konrad Zuse]]'s [[Electromechanics|electromechanical]] "Z machines". The [[Z3 (computer)|Z3]] (1941) was the first working machine featuring [[Binary numeral system|binary]] arithmetic, including floating point arithmetic and a measure of programmability. In 1998 the Z3 was proved to be [[Turing completeness|Turing complete]], therefore being the world's first operational computer.<ref>{{cite journal|last=[[Raúl Rojas|Rojas]] |first=R. |title=How to make Zuse's Z3 a universal computer |journal=IEEE Annals of the History of Computing |volume=20 |number=3 |pages=51–54 |year=1998 |doi=10.1109/85.707574}}</ref>
* The non-programmable [[Atanasoff–Berry Computer]] (1941) which used vacuum tube based [[computation]], binary numbers, and [[regenerative capacitor memory]]. The use of regenerative memory allowed it to be much more compact then its peers (being approximately the size of a large desk or workbench), since intermediate results could be stored and then fed back into the same set of computation elements.
* The secret British [[Colossus computer]]s (1943),<ref>B. Jack Copeland, ed., Colossus: The Secrets of Bletchley Park's Codebreaking Computers, Oxford University Press, 2006</ref> which had limited programmability but demonstrated that a device using thousands of tubes could be reasonably reliable and electronically reprogrammable. It was used for [[cryptanalysis|breaking]] German wartime codes.
* The [[Harvard Mark I]] (1944), a large-scale electromechanical computer with limited programmability.
* The U.S. Army's [[Ballistic Research Laboratory]] [[ENIAC]] (1946), which used [[decimal]] arithmetic and is sometimes called the first general purpose [[Electronics|electronic]] computer (since [[Konrad Zuse]]'s [[Z3 (computer)|Z3]] of 1941 used [[electromagnet]]s instead of [[electronics]]). Initially, however, ENIAC had an inflexible architecture which essentially required rewiring to change its programming.

Several developers of ENIAC, recognizing its flaws, came up with a far more flexible and elegant design, which came to be known as the "stored program architecture" or [[von Neumann architecture]]. This design was first formally described by [[John von Neumann]] in the paper ''[[First Draft of a Report on the EDVAC]]'', distributed in 1945. A number of projects to develop computers based on the stored-program architecture commenced around this time, the first of these being completed in [[Great Britain]]. The first to be demonstrated working was the [[Manchester Small-Scale Experimental Machine]] (SSEM or "Baby"), while the [[Electronic Delay Storage Automatic Calculator|EDSAC]], completed a year after SSEM, was the first practical implementation of the stored program design. Shortly thereafter, the machine originally described by von Neumann's paper—[[EDVAC]]—was completed but did not see full-time use for an additional two years.

Nearly all modern computers implement some form of the stored-program architecture, making it the single trait by which the word "computer" is now defined. While the technologies used in computers have changed dramatically since the first electronic, general-purpose computers of the 1940s, most still use the von Neumann architecture.

Computers using [[vacuum tube]]s as their electronic elements were in use throughout the 1950s, but by the 1960s had been largely replaced by [[transistor]]-based machines, which were smaller, faster, cheaper to produce, required less power, and were more reliable. The first transistorised computer was demonstrated at the [[University of Manchester]] in 1953.<ref name=LavingtonP37>{{Harvnb|Lavington|1998|p=37}}</ref> In the 1970s, [[integrated circuit]] technology and the subsequent creation of [[microprocessor]]s, such as the [[Intel 4004]], further decreased size and cost and further increased speed and reliability of computers. By the late 1970s, many products such as [[Videocassette recorder|video recorders]] contained dedicated computers called [[microcontroller]]s, and they started to appear as a replacement to mechanical controls in domestic appliances such as [[washing machine]]s. The 1980s witnessed [[home computer]]s and the now ubiquitous [[personal computer]]. With the evolution of the [[Internet]], personal computers are becoming as common as the [[television]] and the [[telephone]] in the household.

Modern [[smartphone]]s are fully-programmable computers in their own right, and as of 2009 may well be the most common form of such computers in existence.

==Stored program architecture==
{{Main|Computer program|Computer programming}}

The defining feature of modern computers which distinguishes them from all other machines is that they can be [[computer programming|programmed]]. That is to say that a list of [[Instruction (computer science)|instructions]] (the [[Computer program|program]]) can be given to the computer and it will store them and carry them out at some time in the future.

In most cases, computer instructions are simple: add one number to another, move some data from one location to another, send a message to some external device, etc. These instructions are read from the computer's [[Computer data storage|memory]] and are generally carried out ([[execution (computing)|executed]]) in the order they were given. However, there are usually specialized instructions to tell the computer to jump ahead or backwards to some other place in the program and to carry on executing from there. These are called "jump" instructions (or [[Branch (computer science)|branches]]). Furthermore, jump instructions may be made to happen [[conditional (programming)|conditionally]] so that different sequences of instructions may be used depending on the result of some previous calculation or some external event. Many computers directly support [[subroutine]]s by providing a type of jump that "remembers" the location it jumped from and another instruction to return to the instruction following that jump instruction.

Program execution might be likened to reading a book. While a person will normally read each word and line in sequence, they may at times jump back to an earlier place in the text or skip sections that are not of interest. Similarly, a computer may sometimes go back and repeat the instructions in some section of the program over and over again until some internal condition is met. This is called the [[control flow|flow of control]] within the program and it is what allows the computer to perform tasks repeatedly without human intervention.

Comparatively, a person using a [[calculator|pocket calculator]] can perform a basic arithmetic operation such as adding two numbers with just a few button presses. But to add together all of the numbers from 1 to 1,000 would take thousands of button presses and a lot of time—with a near certainty of making a mistake. On the other hand, a computer may be programmed to do this with just a few simple instructions. For example:

 mov #0,sum ; set sum to 0
 mov #1,num ; set num to 1
 loop: add num,sum ; add num to sum
 add #1,num ; add 1 to num
 cmp num,#1000 ; compare num to 1000
 ble loop ; if num <= 1000, go back to 'loop'
 halt ; end of program. stop running

Once told to run this program, the computer will perform the repetitive addition task without further human intervention. It will almost never make a mistake and a modern PC can complete the task in about a millionth of a second.<ref>This program was written similarly to those for the [[PDP-11]] [[minicomputer]] and shows some typical things a computer can do. All the text after the semicolons are [[Comment (computer programming)|comments]] for the benefit of human readers. These have no significance to the computer and are ignored. {{Ref harvard|digital1972|Digital Equipment Corporation 1972|a}}</ref>

However, computers cannot "think" for themselves in the sense that they only solve problems in exactly the way they are programmed to. An intelligent human faced with the above addition task might soon realize that instead of actually adding up all the numbers one can simply use the equation

: <math>1+2+3+...+n = {{n(n+1)} \over 2}</math>

and arrive at the correct answer (500,500) with little work.<ref>Attempts are often made to create programs that can overcome this fundamental limitation of computers. Software that mimics learning and adaptation is part of [[artificial intelligence]].</ref> In other words, a computer programmed to add up the numbers one by one as in the example above would do exactly that without regard to efficiency or alternative solutions.

===كړنلارې===
[[File:FortranCardPROJ039.agr.jpg|thumb|right|300px|A 1970s [[punched card]] containing one line from a [[Fortran|FORTRAN]] program. The card reads: "Z(1) = Y + W(1)" and is labelled "PROJ039" for identification purposes.]]

In practical terms, a '''[[computer program]]''' may run from just a few instructions to many millions of instructions, as in a program for a [[word processor]] or a [[web browser]]. A typical modern computer can execute billions of instructions per second ([[hertz|gigahertz or GHz]]) and rarely make a mistake over many years of operation. Large computer programs consisting of several million instructions may take teams of [[programmer]]s years to write, and due to the complexity of the task almost certainly contain errors.

Errors in computer programs are called "[[Software bug|bugs]]". Bugs may be benign and not affect the usefulness of the program, or have only subtle effects. But in some cases they may cause the program to "[[Hang (computing)|hang]]"—become unresponsive to input such as [[Mouse (computing)|mouse]] clicks or keystrokes, or to completely fail or "[[Crash (computing)|crash]]". Otherwise benign bugs may sometimes may be harnessed for malicious intent by an unscrupulous user writing an "[[Exploit (computer security)|exploit]]"—code designed to take advantage of a bug and disrupt a program's proper execution. Bugs are usually not the fault of the computer. Since computers merely execute the instructions they are given, bugs are nearly always the result of programmer error or an oversight made in the program's design.<ref>It is not universally true that bugs are solely due to programmer oversight. Computer hardware may fail or may itself have a fundamental problem that produces unexpected results in certain situations. For instance, the [[Pentium FDIV bug]] caused some [[Intel Corporation|Intel]] [[microprocessor]]s in the early 1990s to produce inaccurate results for certain [[floating point]] division operations. This was caused by a flaw in the microprocessor design and resulted in a partial recall of the affected devices.</ref>

In most computers, individual instructions are stored as [[machine code]] with each instruction being given a unique number (its operation code or [[opcode]] for short). The command to add two numbers together would have one opcode, the command to multiply them would have a different opcode and so on. The simplest computers are able to perform any of a handful of different instructions; the more complex computers have several hundred to choose from—each with a unique numerical code. Since the computer's memory is able to store numbers, it can also store the instruction codes. This leads to the important fact that entire programs (which are just lists of instructions) can be represented as lists of numbers and can themselves be manipulated inside the computer just as if they were numeric data. The fundamental concept of storing programs in the computer's memory alongside the data they operate on is the crux of the von Neumann, or stored program, architecture. In some cases, a computer might store some or all of its program in memory that is kept separate from the data it operates on. This is called the [[Harvard architecture]] after the [[Harvard Mark I]] computer. Modern von Neumann computers display some traits of the Harvard architecture in their designs, such as in [[CPU cache]]s.

While it is possible to write computer programs as long lists of numbers ([[machine code|machine language]]) and this technique was used with many early computers,<ref>Even some later computers were commonly programmed directly in machine code. Some [[minicomputer]]s like the [[Digital Equipment Corporation|DEC]] [[PDP-8]] could be programmed directly from a panel of switches. However, this method was usually used only as part of the [[booting]] process. Most modern computers boot entirely automatically by reading a boot program from some [[non-volatile memory]].</ref> it is extremely tedious to do so in practice, especially for complicated programs. Instead, each basic instruction can be given a short name that is indicative of its function and easy to remember—a [[mnemonic]] such as ADD, SUB, MULT or JUMP. These mnemonics are collectively known as a computer's [[assembly language]]. Converting programs written in assembly language into something the computer can actually understand (machine language) is usually done by a computer program called an assembler. Machine languages and the assembly languages that represent them (collectively termed [[low-level programming language]]s) tend to be unique to a particular type of computer. For instance, an [[ARM architecture]] computer (such as may be found in a [[Personal digital assistant|PDA]] or a [[handheld video game|hand-held videogame]]) cannot understand the machine language of an [[Pentium|Intel Pentium]] or the [[Athlon 64|AMD Athlon 64]] computer that might be in a [[Personal computer|PC]].<ref>However, there is sometimes some form of machine language compatibility between different computers. An [[x86-64]] compatible microprocessor like the [[Advanced Micro Devices|AMD]] [[Athlon 64]] is able to run most of the same programs that an [[Intel Core 2]] microprocessor can, as well as programs designed for earlier microprocessors like the Intel [[Pentium]]s and [[Intel 80486]]. This contrasts with very early commercial computers, which were often one-of-a-kind and totally incompatible with other computers.</ref>

Though considerably easier than in machine language, writing long programs in assembly language is often difficult and error prone. Therefore, most complicated programs are written in more abstract [[high-level programming language]]s that are able to express the needs of the [[programmer]] more conveniently (and thereby help reduce programmer error). High level languages are usually "compiled" into machine language (or sometimes into assembly language and then into machine language) using another computer program called a [[compiler]].<ref>High level languages are also often [[interpreted language|interpreted]] rather than compiled. Interpreted languages are translated into machine code on the fly by another program called an [[interpreter (computing)|interpreter]].</ref> Since high level languages are more abstract than assembly language, it is possible to use different compilers to translate the same high level language program into the machine language of many different types of computer. This is part of the means by which software like video games may be made available for different computer architectures such as personal computers and various [[video game console]]s.

The task of developing large [[Computer software|software]] systems presents a significant intellectual challenge. Producing software with an acceptably high reliability within a predictable schedule and budget has historically been difficult; the academic and professional discipline of [[software engineering]] concentrates specifically on this challenge.

===Example===
[[File:StoplightMexico.jpg|right|thumb|A traffic light showing red]]
Suppose a computer is being employed to drive a [[traffic light]] at an intersection between two streets. The computer has the following three basic instructions.
# ON(Streetname, Color) Turns the light on Streetname with a specified Color on.
# OFF(Streetname, Color) Turns the light on Streetname with a specified Color off.
# WAIT(Seconds) Waits a specifed number of seconds.
# START Starts the program
# REPEAT Tells the computer to repeat a specified part of the program in a loop.
Comments are marked with a // on the left margin. Comments in a computer program do not affect the operation of the program. They are not evaluated by the computer.
Assume the streetnames are Broadway and Main.

 START

 //Let Broadway traffic go
 OFF(Broadway, Red)
 ON(Broadway, Green)
 WAIT(60 seconds)

 //Stop Broadway traffic
 OFF(Broadway, Green)
 ON(Broadway, Yellow)
 WAIT(3 seconds)
 OFF(Broadway, Yellow)
 ON(Broadway, Red)

 //Let Main traffic go
 OFF(Main, Red)
 ON(Main, Green)
 WAIT(60 seconds)

 //Stop Main traffic
 OFF(Main, Green)
 ON(Main, Yellow)
 WAIT(3 seconds)
 OFF(Main, Yellow)
 ON(Main, Red)

 //Tell computer to continuously repeat the program.
 REPEAT ALL

With this set of instructions, the computer would cycle the light continually through red, green, yellow and back to red again on both streets.

However, suppose there is a simple on/off [[switch]] connected to the computer that is intended to be used to make the light flash red while some maintenance operation is being performed. The program might then instruct the computer to:

 START

 IF Switch == OFF then: //Normal traffic signal operation
 {
 //Let Broadway traffic go
 OFF(Broadway, Red)
 ON(Broadway, Green)
 WAIT(60 seconds)

 //Stop Broadway traffic
 OFF(Broadway, Green)
 ON(Broadway, Yellow)
 WAIT(3 seconds)
 OFF(Broadway, Yellow)
 ON(Broadway, Red)

 //Let Main traffic go
 OFF(Main, Red)
 ON(Main, Green)
 WAIT(60 seconds)

 //Stop Main traffic
 OFF(Main, Green)
 ON(Main, Yellow)
 WAIT(3 seconds)
 OFF(Main, Yellow)
 ON(Main, Red)

 //Tell the computer to repeat this section continuously.
 REPEAT THIS SECTION
 }

 IF Switch == ON THEN: //Maintenance Mode
 {
 //Turn the red lights on and wait 1 second.
 ON(Broadway, Red)
 ON(Main, Red)
 WAIT(1 second)

 //Turn the red lights off and wait 1 second.
 OFF(Broadway, Red)
 OFF(Main, Red)
 WAIT(1 second)

 //Tell the comptuer to repeat the statements in this section.
 REPEAT THIS SECTION
 }

In this manner, the traffic signal will run a flash-red program when the switch is on, and will run the normal program when the switch is off. Both of these program examples show the basic layout of a computer program in a simple, familiar context of a traffic signal. Any experienced programmer can spot many [[software bug]]s in the program, for instance, not making sure that the green light is off when the switch is set to flash red. However, to remove all possible bugs would make this program much longer and more complicated, and would be confusing to nontechnical readers: the aim of this example is a simple demonstration of how computer instructions are laid out.

==دنده==

A general purpose computer has four main components: the [[arithmetic logic unit]] (ALU), the [[control unit]], the [[Computer data storage|memory]], and the input and output devices (collectively termed I/O). These parts are interconnected by [[bus (computing)|busses]], often made of groups of [[wire]]s.

Inside each of these parts are thousands to trillions of small [[electrical network|electrical circuits]] which can be turned off or on by means of an [[transistor|electronic switch]]. Each circuit represents a [[bit]] (binary digit) of information so that when the circuit is on it represents a "1", and when off it represents a "0" (in positive logic representation). The circuits are arranged in [[logic gate]]s so that one or more of the circuits may control the state of one or more of the other circuits.

The control unit, ALU, registers, and basic I/O (and often other hardware closely linked with these) are collectively known as a [[central processing unit]] (CPU). Early CPUs were composed of many separate components but since the mid-1970s CPUs have typically been constructed on a single [[integrated circuit]] called a ''[[microprocessor]]''.

===مهار يوون===
[[File:Mips32 addi.svg|thumb|260px|right|Diagram showing how a particular [[MIPS architecture]] instruction would be decoded by the control system.]]

The control unit (often called a control system or central controller) manages the computer's various components; it reads and interprets (decodes) the program instructions, transforming them into a series of control signals which activate other parts of the computer.<ref>The control unit's role in interpreting instructions has varied somewhat in the past. Although the control unit is solely responsible for instruction interpretation in most modern computers, this is not always the case. Many computers include some instructions that may only be partially interpreted by the control system and partially interpreted by another device. This is especially the case with specialized computing hardware that may be partially self-contained. For example, [[EDVAC]], one of the earliest stored-program computers, used a central control unit that only interpreted four instructions. All of the arithmetic-related instructions were passed on to its arithmetic unit and further decoded there.</ref> Control systems in advanced computers may change the order of some instructions so as to improve performance.

A key component common to all CPUs is the [[program counter]], a special memory cell (a [[processor register|register]]) that keeps track of which location in memory the next instruction is to be read from.<ref>Instructions often occupy more than one memory address, so the program counters usually increases by the number of memory locations required to store one instruction.</ref>

The control system's function is as follows—note that this is a simplified description, and some of these steps may be performed concurrently or in a different order depending on the type of CPU:

# Read the code for the next instruction from the cell indicated by the program counter.
# Decode the numerical code for the instruction into a set of commands or signals for each of the other systems.
# Increment the program counter so it points to the next instruction.
# Read whatever data the instruction requires from cells in memory (or perhaps from an input device). The location of this required data is typically stored within the instruction code.
# Provide the necessary data to an ALU or register.
# If the instruction requires an ALU or specialized hardware to complete, instruct the hardware to perform the requested operation.
# Write the result from the ALU back to a memory location or to a register or perhaps an output device.
# Jump back to step (1).

Since the program counter is (conceptually) just another set of memory cells, it can be changed by calculations done in the ALU. Adding 100 to the program counter would cause the next instruction to be read from a place 100 locations further down the program. Instructions that modify the program counter are often known as "jumps" and allow for loops (instructions that are repeated by the computer) and often conditional instruction execution (both examples of [[control flow]]).

It is noticeable that the sequence of operations that the control unit goes through to process an instruction is in itself like a short computer program—and indeed, in some more complex CPU designs, there is another yet smaller computer called a [[microsequencer]] that runs a [[microcode]] program that causes all of these events to happen.

===Arithmetic/logic unit (ALU)===
{{Main|Arithmetic logic unit}}

The ALU is capable of performing two classes of operations: arithmetic and logic.<ref>{{cite book
 | title = The Most Complex Machine: A Survey of Computers and Computing
 | author = David J. Eck
 | publisher = A K Peters, Ltd.
 | year = 2000
 | isbn = 9781568811284
 | page = 54
}}</ref>

The set of arithmetic operations that a particular ALU supports may be limited to adding and subtracting or might include multiplying or dividing, [[trigonometry]] functions (sine, cosine, etc) and [[square root]]s. Some can only operate on whole numbers ([[integer]]s) whilst others use [[floating point]] to represent [[real number]]s—albeit with limited precision. However, any computer that is capable of performing just the simplest operations can be programmed to break down the more complex operations into simple steps that it can perform. Therefore, any computer can be programmed to perform any arithmetic operation—although it will take more time to do so if its ALU does not directly support the operation. An ALU may also compare numbers and return [[Truth value|boolean truth values]] (true or false) depending on whether one is equal to, greater than or less than the other ("is 64 greater than 65?").

Logic operations involve [[Boolean logic]]: [[logical conjunction|AND]], [[logical disjunction|OR]], [[Exclusive or|XOR]] and [[Negation|NOT]]. These can be useful both for creating complicated [[conditional (programming)|conditional statement]]s and processing [[boolean logic]].

[[Superscalar]] computers may contain multiple ALUs so that they can process several instructions at the same time.<ref>{{cite book
 | title = Handbook of Parallel Computing and Statistics
 | author = Erricos John Kontoghiorghes
 | publisher = CRC Press
 | year = 2006
 | isbn = 9780824740672
 | page = 45
}}</ref> [[Graphics processing unit|Graphics processors]] and computers with [[SIMD]] and [[MIMD]] features often provide ALUs that can perform arithmetic on [[Euclidean vector|vectors]] and [[Matrix (mathematics)|matrices]].

===ياد===

[[File:Magnetic core.jpg|thumb|right|[[Magnetic core memory]] was the computer memory of choice throughout the 1960s, until it was replaced by semiconductor memory.]]

A computer's memory can be viewed as a list of cells into which numbers can be placed or read. Each cell has a numbered "address" and can store a single number. The computer can be instructed to "put the number 123 into the cell numbered 1357" or to "add the number that is in cell 1357 to the number that is in cell 2468 and put the answer into cell 1595". The information stored in memory may represent practically anything. Letters, numbers, even computer instructions can be placed into memory with equal ease. Since the CPU does not differentiate between different types of information, it is the software's responsibility to give significance to what the memory sees as nothing but a series of numbers.

In almost all modern computers, each memory cell is set up to store [[binary numeral system|binary number]]s in groups of eight bits (called a [[byte]]). Each byte is able to represent 256 different numbers (2^8 = 256); either from 0 to 255 or -128 to +127. To store larger numbers, several consecutive bytes may be used (typically, two, four or eight). When negative numbers are required, they are usually stored in [[two's complement]] notation. Other arrangements are possible, but are usually not seen outside of specialized applications or historical contexts. A computer can store any kind of information in memory if it can be represented numerically. Modern computers have billions or even trillions of bytes of memory.

The CPU contains a special set of memory cells called [[Processor register|registers]] that can be read and written to much more rapidly than the main memory area. There are typically between two and one hundred registers depending on the type of CPU. Registers are used for the most frequently needed data items to avoid having to access main memory every time data is needed. As data is constantly being worked on, reducing the need to access main memory (which is often slow compared to the ALU and control units) greatly increases the computer's speed.

Computer main memory comes in two principal varieties: [[random-access memory]] or RAM and [[read-only memory]] or ROM. RAM can be read and written to anytime the CPU commands it, but ROM is pre-loaded with data and software that never changes, so the CPU can only read from it. ROM is typically used to store the computer's initial start-up instructions. In general, the contents of RAM are erased when the power to the computer is turned off, but ROM retains its data indefinitely. In a PC, the ROM contains a specialized program called the [[BIOS]] that orchestrates loading the computer's [[operating system]] from the hard disk drive into RAM whenever the computer is turned on or reset. In [[embedded system|embedded computer]]s, which frequently do not have disk drives, all of the required software may be stored in ROM. Software stored in ROM is often called [[firmware]], because it is notionally more like hardware than software. [[Flash memory]] blurs the distinction between ROM and RAM, as it retains its data when turned off but is also rewritable. It is typically much slower than conventional ROM and RAM however, so its use is restricted to applications where high speed is unnecessary.<ref>Flash memory also may only be rewritten a limited number of times before wearing out, making it less useful for heavy random access usage. {{Ref harvard|verma1988|Verma 1988|a}}</ref>

In more sophisticated computers there may be one or more RAM [[CPU cache|cache memories]] which are slower than registers but faster than main memory. Generally computers with this sort of cache are designed to move frequently needed data into the cache automatically, often without the need for any intervention on the programmer's part.

===ننوتي(input) او وتني (output)===
{{Main|Input/output}}
[[File:HDDspin.JPG|thumb|right|[[Hard disk drive]]s are common I/O devices used with computers.]]
I/O is the means by which a computer exchanges information with the outside world.<ref>{{cite book
 | title = Introduction to the Basic Computer
 | author = Donald Eadie
 | year = 1968
 | publisher = Prentice-Hall
 | page = 12
}}</ref> Devices that provide input or output to the computer are called [[peripheral]]s.<ref>{{cite book
 | title = Introduction to Microcomputers and the Microprocessors
 | author = Arpad Barna
 | coauthors = Dan I. Porat
 | publisher = Wiley
 | year = 1976
 | isbn = 9780471050513
 | page = 85
}}</ref> On a typical [[personal computer]], peripherals include input devices like the keyboard and [[mouse (computing)|mouse]], and output devices such as the [[computer monitor|display]] and [[printer (computing)|printer]]. [[Hard disk drive]]s, [[floppy disk|floppy disk drive]]s and [[optical disc drive]]s serve as both input and output devices. [[Computer networking]] is another form of I/O.

Often, I/O devices are complex computers in their own right with their own CPU and memory. A [[graphics processing unit]] might contain fifty or more tiny computers that perform the calculations necessary to display [[3D computer graphics|3D graphics]]{{Citation needed|date=December 2007}}. Modern [[desktop computer]]s contain many smaller computers that assist the main CPU in performing I/O.

===ګڼدندي (Multitasking)===
{{Main|Computer multitasking}}
While a computer may be viewed as running one gigantic program stored in its main memory, in some systems it is necessary to give the appearance of running several programs simultaneously. This is achieved by multitasking i.e. having the computer switch rapidly between running each program in turn.<ref>{{cite book
 | title = Learning the UNIX Operating System: A Concise Guide for the New User
 | author = Jerry Peek
 | coauthors = Grace Todino, John Strang
 | publisher = O'Reilly
 | year = 2002
 | isbn = 9780596002619
 | page = 130
}}</ref>

One means by which this is done is with a special signal called an [[interrupt]] which can periodically cause the computer to stop executing instructions where it was and do something else instead. By remembering where it was executing prior to the interrupt, the computer can return to that task later. If several programs are running "at the same time", then the interrupt generator might be causing several hundred interrupts per second, causing a program switch each time. Since modern computers typically execute instructions several orders of magnitude faster than human perception, it may appear that many programs are running at the same time even though only one is ever executing in any given instant. This method of multitasking is sometimes termed "time-sharing" since each program is allocated a "slice" of time in turn.<ref>{{cite book
 | title = Noise Reduction in Speech Applications
 | author = Gillian M. Davis
 | publisher = CRC Press
 | year = 2002
 | isbn = 9780849309496
 | page = 111
}}</ref>

Before the era of cheap computers, the principle use for multitasking was to allow many people to share the same computer.

Seemingly, multitasking would cause a computer that is switching between several programs to run more slowly&nbsp;— in direct proportion to the number of programs it is running. However, most programs spend much of their time waiting for slow input/output devices to complete their tasks. If a program is waiting for the user to click on the mouse or press a key on the keyboard, then it will not take a "time slice" until the event it is waiting for has occurred. This frees up time for other programs to execute so that many programs may be run at the same time without unacceptable speed loss.

===ګڼبهيريز (Multiprocessing)===
{{Main|Multiprocessing}}
[[File:Cray 2 Arts et Metiers dsc03940.jpg|thumb|[[Cray]] designed many supercomputers that used multiprocessing heavily.]]
Some computers are designed to distribute their work across several CPUs in a multiprocessing configuration, a technique once employed only in large and powerful machines such as [[supercomputer]]s, [[mainframe computer]]s and [[server (computing)|servers]]. Multiprocessor and [[multi-core]] (multiple CPUs on a single integrated circuit) personal and laptop computers are now widely available, and are being increasingly used in lower-end markets as a result.

Supercomputers in particular often have highly unique architectures that differ significantly from the basic stored-program architecture and from general purpose computers.<ref>However, it is also very common to construct supercomputers out of many pieces of cheap commodity hardware; usually individual computers connected by networks. These so-called [[cluster (computing)|computer cluster]]s can often provide supercomputer performance at a much lower cost than customized designs. While custom architectures are still used for most of the most powerful supercomputers, there has been a proliferation of cluster computers in recent years. {{Ref harvard|top5002006|TOP500 2006|a}}</ref> They often feature thousands of CPUs, customized high-speed interconnects, and specialized computing hardware. Such designs tend to be useful only for specialized tasks due to the large scale of program organization required to successfully utilize most of the available resources at once. Supercomputers usually see usage in large-scale [[Computer simulation|simulation]], [[Rendering (computer graphics)|graphics rendering]], and [[cryptography]] applications, as well as with other so-called "[[embarrassingly parallel]]" tasks.

===Networking and the Internet===
{{Main|Computer networking|Internet}}
[[File:Internet map 1024.jpg|thumb|220px|left|Visualization of a portion of the [[Routing|routes]] on the Internet.]]
Computers have been used to coordinate information between multiple locations since the 1950s. The U.S. military's [[Semi Automatic Ground Environment|SAGE]] system was the first large-scale example of such a system, which led to a number of special-purpose commercial systems like [[Sabre (computer system)|Sabre]].<ref>{{cite book
 | title = Systems, Experts, and Computers
 | author = Agatha C. Hughes
 | publisher = [[MIT Press]]
 | year = 2000
 | isbn = 9780262082853
 | page = 161
 | quote = The experience of SAGE helped make possible the first truly large-scale commercial real-time network: the SABRE computerized airline reservations system...
}}</ref>

In the 1970s, computer engineers at research institutions throughout the United States began to link their computers together using telecommunications technology. This effort was funded by ARPA (now [[DARPA]]), and the [[computer network]] that it produced was called the [[ARPANET]].<ref>{{citeweb|title=A Brief History of the Internet|url=http://www.isoc.org/internet/history/brief.shtml|publisher=''[[Internet Society]]''|accessdate=2008-09-20}}</ref> The technologies that made the Arpanet possible spread and evolved.

In time, the network spread beyond academic and military institutions and became known as the [[Internet]]. The emergence of networking involved a redefinition of the nature and boundaries of the computer. Computer operating systems and applications were modified to include the ability to define and access the resources of other computers on the network, such as peripheral devices, stored information, and the like, as extensions of the resources of an individual computer. Initially these facilities were available primarily to people working in high-tech environments, but in the 1990s the spread of applications like [[e-mail]] and the [[World Wide Web]], combined with the development of cheap, fast networking technologies like [[Ethernet]] and [[Asymmetric digital subscriber line|ADSL]] saw computer networking become almost ubiquitous. In fact, the number of computers that are networked is growing phenomenally. A very large proportion of [[personal computer]]s regularly connect to the [[Internet]] to communicate and receive information. "Wireless" networking, often utilizing [[mobile phone]] networks, has meant networking is becoming increasingly ubiquitous even in mobile computing environments.
{{-}}

==Further topics==
===Hardware===
{{Main|Personal computer hardware}}
The term '''hardware''' covers all of those parts of a computer that are tangible objects. Circuits, displays, power supplies, cables, keyboards, printers and mice are all hardware.

<!-- WARNING: Please be careful about modifying this table, especially if you are not familiar with Wikipedia table syntax. Make judicious use of the "Preview" button! -->
{| class="wikitable"
|+'''[[History of computing hardware]]'''
|-
| rowspan="2" | First Generation (Mechanical/Electromechanical) || Calculators || [[Antikythera mechanism]], [[Difference engine]], [[Norden bombsight]]
|-
| Programmable Devices || [[Jacquard loom]], [[Analytical engine]], [[Harvard Mark I]], [[Z3 (computer)|Z3]]
|-
| rowspan="2" | Second Generation (Vacuum Tubes) || Calculators || [[Atanasoff–Berry Computer]], [[IBM 604]], [[Remington Rand 409|UNIVAC 60]], [[Remington Rand 409|UNIVAC 120]]
|-
| [[List of vacuum tube computers|Programmable Devices]] || [[Colossus computer|Colossus]], [[ENIAC]], [[Manchester Small-Scale Experimental Machine]], [[Electronic Delay Storage Automatic Calculator|EDSAC]], [[Manchester Mark 1]], [[Ferranti Pegasus]], [[Ferranti Mercury]], [[CSIRAC]], [[EDVAC]], [[UNIVAC I]], [[IBM 701]], [[IBM 702]], [[IBM 650]], [[Z22]]
|-
| rowspan="2" | Third Generation (Discrete transistors and SSI, MSI, LSI [[Integrated circuit]]s) || [[Mainframe computer|Mainframes]] || [[IBM 7090]], [[IBM 7080]], [[IBM System/360]], [[BUNCH]]
|-
| [[Minicomputer]] || [[PDP-8]], [[PDP-11]], [[IBM System/32]], [[IBM System/36]]
|-
| rowspan="8" | Fourth Generation (VLSI integrated circuits) || Minicomputer || [[VAX]], [[IBM System i]]
|-
| [[4-bit]] microcomputer || [[Intel 4004]], [[Intel 4040]]
|-
| [[8-bit]] microcomputer || [[Intel 8008]], [[Intel 8080]], [[Motorola 6800]], [[Motorola 6809]], [[MOS Technology 6502]], [[Zilog Z80]]
|-
| [[16-bit]] microcomputer || [[Intel 8088]], [[Zilog Z8000]], [[WDC 65816/65802]]
|-
| [[32-bit]] microcomputer || [[Intel 80386]], [[Pentium]], [[Motorola 68000]], [[ARM architecture]]
|-
| [[64-bit]] microcomputer<ref>Most major 64-bit [[instruction set|instruction set architecture]]s are extensions of earlier designs. All of the architectures listed in this table, except for Alpha, existed in 32-bit forms before their 64-bit incarnations were introduced.</ref>|| [[DEC Alpha|Alpha]], [[MIPS architecture|MIPS]], [[PA-RISC]], [[PowerPC]], [[SPARC]], [[x86-64]]
|-
| [[Embedded system|Embedded computer]] || [[Intel 8048]], [[Intel 8051]]
|-
| [[Personal computer]] || [[Desktop computer]], [[Home computer]], [[Laptop|Laptop computer]], [[Personal digital assistant]] (PDA), [[Portable computer]], [[Tablet PC]], [[Wearable computer]]
|-
| rowspan="1" | Theoretical/experimental || [[Quantum computer]], [[Chemical computer]], [[DNA computing]], [[Photonic computing|Optical computer]], [[Spintronics|Spintronics based computer]]
|}

{| class="wikitable"
|+'''Other Hardware Topics'''
|-
| rowspan="3" | [[Peripheral|Peripheral device]] ([[Input/output]]) || Input || [[Mouse (computing)|Mouse]], [[Keyboard (computing)|Keyboard]], [[Joystick]], [[Image scanner]], [[Webcam]], [[Graphics tablet]], [[Microphone]]
|-
| Output || [[computer monitor|Monitor]], [[Printer (computing)|Printer]], [[Computer speaker|Loudspeaker]]
|-
| Both || [[Floppy disk|Floppy disk drive]], [[Hard disk drive]], [[Optical disc]] drive, [[Teleprinter]]
|-
| rowspan="2" | [[Bus (computing)|Computer bus]]ses || Short range || [[RS-232]], [[SCSI]], [[Conventional PCI|PCI]], [[Universal Serial Bus|USB]]
|-
| Long range ([[Computer networking]]) || [[Ethernet]], [[Asynchronous Transfer Mode|ATM]], [[Fiber distributed data interface|FDDI]]
|-
|}

===Software===
{{Main|Computer software}}
'''Software''' refers to parts of the computer which do not have a material form, such as programs, data, protocols, etc. When software is stored in hardware that cannot easily be modified (such as [[BIOS]] [[Read-only memory|ROM]] in an [[IBM PC compatible]]), it is sometimes called "firmware" to indicate that it falls into an uncertain area somewhere between hardware and software.

{| class="wikitable"
|+'''[[Computer software]]'''
|-
| rowspan="7" | [[Operating system]] || [[Unix]] and [[Berkeley Software Distribution|BSD]] || [[UNIX System V]], [[IBM AIX]], [[HP-UX]], [[Solaris (operating system)|Solaris]] ([[SunOS]]), [[IRIX]], [[List of BSD operating systems]]
|-
| [[GNU]]/[[Linux]] || [[List of Linux distributions]], [[Comparison of Linux distributions]]
|-
| [[Microsoft Windows]] || [[Windows 95]], [[Windows 98]], [[Windows NT]], [[Windows 2000]], [[Windows XP]], [[Windows Vista]], [[Microsoft Windows CE|Windows CE]]
|-
| [[DOS]] || [[86-DOS]] (QDOS), [[IBM PC DOS|PC-DOS]], [[MS-DOS]], [[FreeDOS]]
|-
| [[Mac OS]] || [[Mac OS|Mac OS classic]], [[Mac OS X]]
|-
| [[Embedded operating system|Embedded]] and [[Real-time operating system|real-time]] || [[List of operating systems#Embedded|List of embedded operating systems]]
|-
| Experimental || [[Amoeba distributed operating system|Amoeba]], [[Oberon (operating system)|Oberon]]/[[Bluebottle OS|Bluebottle]], [[Plan 9 from Bell Labs]]
|-
| rowspan="2" | [[Library (computing)|Library]] || [[Multimedia]] || [[DirectX]], [[OpenGL]], [[OpenAL]]
|-
| Programming library || [[C standard library]], [[Standard Template Library]]
|-
| rowspan="2" | [[Data (computing)|Data]] || [[Protocol (computing)|Protocol]] || [[Internet Protocol Suite|TCP/IP]], [[Kermit (protocol)|Kermit]], [[File Transfer Protocol|FTP]], [[Hypertext Transfer Protocol|HTTP]], [[Simple Mail Transfer Protocol|SMTP]]
|-
| [[File format]] || [[HTML]], [[XML]], [[JPEG]], [[Moving Picture Experts Group|MPEG]], [[Portable Network Graphics|PNG]]
|-
| rowspan="2" | [[User interface]] || [[Graphical user interface]] ([[WIMP (computing)|WIMP]]) || [[Microsoft Windows]], [[GNOME]], [[KDE]], [[QNX|QNX Photon]], [[Common Desktop Environment|CDE]], [[Graphical Environment Manager|GEM]]
|-
| [[Text-based (computing)|Text-based user interface]] || [[Command-line interface]], [[Text user interface]]
|-
| rowspan="9" | [[Application software|Application]] || [[Office suite]] || [[Word processing]], [[Desktop publishing]], [[Presentation program]], [[Database management system]], Scheduling & Time management, [[Spreadsheet]], [[Accounting software]]
|-
| [[Internet]] Access || [[Web browser|Browser]], [[E-mail client]], [[Web server]], [[Mail transfer agent]], [[Instant messaging]]
|-
| Design and manufacturing || [[Computer-aided design]], [[Computer-aided manufacturing]], Plant management, Robotic manufacturing, Supply chain management
|-
| [[Computer graphics|Graphics]] || [[Raster graphics editor]], [[Vector graphics editor]], [[3D computer graphics software|3D modeler]], [[Computer animation|Animation editor]], [[3D computer graphics]], [[Video editing]], [[Image processing]]
|-
| [[Digital audio|Audio]] || [[Digital audio editor]], [[Audio player (software)|Audio playback]], Mixing, [[Software synthesizer|Audio synthesis]], [[Computer music]]
|-
| [[Software engineering]] || [[Compiler]], [[Assembly language#Assembler|Assembler]], [[Interpreter (computing)|Interpreter]], [[Debugger]], [[Text editor]], [[Integrated development environment]], [[Software performance analysis]], [[Revision control]], [[Software configuration management]]
|-
| Educational || [[Edutainment]], [[Educational game]], [[Serious game]], [[Flight simulator]]
|-
| [[Video game|Games]] || [[Strategy game|Strategy]], Arcade, [[Puzzle video game|Puzzle]], Simulation, [[First-person shooter]], [[Platform game|Platform]], [[Massively multiplayer online game|Massively multiplayer]], [[Interactive fiction]]
|-
| Misc || [[Artificial intelligence]], [[Antivirus software]], [[Malware scanner]], [[Installation (computer programs)|Installer]]/[[Package management system]]s, [[File manager]]
|}

===Programming languages===
Programming languages provide various ways of specifying programs for computers to run. Unlike [[natural language]]s, programming languages are designed to permit no ambiguity and to be concise. They are purely written languages and are often difficult to read aloud. They are generally either translated into [[machine code]] by a [[compiler]] or an [[Assembly language#Assembler|assembler]] before being run, or translated directly at run time by an [[interpreter (computing)|interpreter]]. Sometimes programs are executed by a hybrid method of the two techniques. There are thousands of different programming languages—some intended to be general purpose, others useful only for highly specialized applications.

<!-- ATTENTION! AUTHORS:
 Please do not add every programming language in existence into this table&nbsp;— there
 are vastly too many of them&nbsp;— and the right place for listing obscure languages
 is in the 'List of...' articles referenced below.
 Please only add very COMMONLY and CURRENTLY used or highly historically relevant
 languages to the lists below or else things will rapidly spiral out of control.
-->
{| class="wikitable"
|+'''[[Programming language]]s'''
| rowspan="1" | Lists of programming languages || [[Timeline of programming languages]], [[List of programming languages by category]], [[Generational list of programming languages]], [[List of programming languages]], [[Non-English-based programming languages]]
|-
| rowspan="1" | Commonly used [[Assembly language]]s || [[ARM architecture|ARM]], [[MIPS architecture|MIPS]], [[X86 assembly language|x86]]
|-
| rowspan="1" | Commonly used [[high-level programming language]]s || [[Ada (programming language)|Ada]], [[BASIC]], [[C (programming language)|C]], [[C++]], [[C Sharp (programming language)|C#]], [[COBOL]], [[Fortran]], [[Java (programming language)|Java]], [[Lisp (programming language)|Lisp]], [[Pascal (programming language)|Pascal]], [[Object Pascal]]
|-
| rowspan="1" | Commonly used [[Scripting language]]s || [[Bourne shell|Bourne script]], [[JavaScript]], [[Python (programming language)|Python]], [[Ruby (programming language)|Ruby]], [[PHP]], [[Perl]]
|-
|}

===Professions and organizations===
As the use of computers has spread throughout society, there are an increasing number of careers involving computers.
{| class="wikitable"
|+'''[[:Category:Computer occupations|Computer-related professions]]'''
|-
| Hardware-related || [[Electrical engineering]], [[Electronic engineering]], [[Computer engineering]], [[Telecommunications engineering]], [[Optical engineering]], [[Nanoengineering]]
|-
| Software-related || [[Computer science]], [[Desktop publishing]], [[Human–computer interaction]], [[Information technology]], [[Computational science]], [[Software engineering]], [[Video game industry]], [[Web design]]
|}

The need for computers to work well together and to be able to exchange information has spawned the need for many standards organizations, clubs and societies of both a formal and informal nature.

{| class="wikitable"
|+'''[[:Category:Computer-related organizations|Organizations]]'''
| Standards groups || [[American National Standards Institute|ANSI]], [[International Electrotechnical Commission|IEC]], [[Institute of Electrical and Electronics Engineers|IEEE]], [[Internet Engineering Task Force|IETF]], [[International Organization for Standardization|ISO]], [[World Wide Web Consortium|W3C]]
|-
| Professional Societies || [[Association for Computing Machinery|ACM]], [[:Category:Association for Computing Machinery Special Interest Groups|ACM Special Interest Groups]], [[Institution of Engineering and Technology|IET]], [[International Federation for Information Processing|IFIP]], [[British Computer Society|BCS]]
|-
| [[Free software|Free]]/[[Open source software]] groups || [[Free Software Foundation]], [[Mozilla Foundation]], [[Apache Software Foundation]]
|}

==See also==
{{portal|Information technology|Computer-aj aj ashton 01.svg}}
* [[Computability theory (computer science)]]
* [[Computer generated holography]]
* [[Computer security]] and [[Computer insecurity]]
* [[Electronic waste]]
* [[List of computer term etymologies]]
* [[List of fictional computers]]
* [[Living computers theory]]
* [[Pulse computer]]
* ''[[The Secret Guide to Computers]]'' (book)
* [[Platform virtualization]]
{{-}}

==Notes==
{{reflist|colwidth=30em}}

==References==
{{refbegin}}
* {{note label|kempf1961|Kempf 1961|a}} {{cite paper
 | author = Kempf, Karl
 | title = Historical Monograph: Electronic Computers Within the Ordnance Corps
 | publisher = [[Aberdeen Proving Ground]] ([[United States Army]])
 | url = http://ed-thelen.org/comp-hist/U-S-Ord-61.html
 | date = 1961
}}
* {{note label|phillips2000|Phillips 2000|a}} {{cite web
 | last = Phillips
 | first = Tony
 | publisher = American Mathematical Society
 | year = 2000
 | title = The Antikythera Mechanism I
 | url = http://www.math.sunysb.edu/~tony/whatsnew/column/antikytheraI-0400/kyth1.html
 | accessdate = 2006-04-05
}}
* {{note label|shannon1940|Shannon 1940|a}} {{cite paper
 | author = Shannon, Claude Elwood
 | title = A symbolic analysis of relay and switching circuits
 | publisher = Massachusetts Institute of Technology
 | url = http://hdl.handle.net/1721.1/11173
 | date = 1940
}}
* {{note label|digital1972|Digital Equipment Corporation 1972|a}} {{cite book
 | author = [[Digital Equipment Corporation]]
 | publisher = Digital Equipment Corporation
 | location = [[Maynard, Massachusetts|Maynard, MA]]
 | title = PDP-11/40 Processor Handbook
 | url = http://bitsavers.vt100.net/dec/www.computer.museum.uq.edu.au_mirror/D-09-30_PDP11-40_Processor_Handbook.pdf
 | format = PDF
 | year = 1972
}}
* {{note label|verma1988|Verma 1988|a}} {{cite paper
 | author = Verma, G.; Mielke, N.
 | title = Reliability performance of ETOX based flash memories
 | publisher = IEEE International Reliability Physics Symposium
 | date = 1988
}}
* {{note label|top5002006|TOP500 2006|a}} {{cite web
 | url = http://www.top500.org/lists/2006/11/overtime/Architectures
 | title = Architectures Share Over Time
 | accessdate=2006-11-27
 | last = Meuer
 | first = Hans
 | authorlink = Hans Meuer
 | coauthors = Strohmaier, Erich; Simon, Horst; [[Jack Dongarra|Dongarra, Jack]]
 | date = [[2006-11-13]]
 | publisher = [[TOP500]]
}}
* {{citation |last=Lavington |first=Simon |title=A History of Manchester Computers |year=1998 |edition=2 |publisher=The British Computer Society |location=Swindon |isbn=0902505018}}
* {{cite book
 | last = Stokes
 | first = Jon
 | title = Inside the Machine: An Illustrated Introduction to Microprocessors and Computer Architecture
 | year = 2007
 | publisher = No Starch Press
 | location = San Francisco
 | isbn = 978-1-59327-104-6
}}
{{refend}}

==External links==
{{sisterlinks|commons=Category:Computers|q=Computers|v=Introduction to Computers|wikt=computer}}
* [http://search.wikia.com/wiki/Mini:Computer Computer mini-article]

<!--===========================({{NoMoreLinks}})===============================-->
<!--| DO NOT ADD MORE LINKS TO THIS ARTICLE. WIKIPEDIA IS NOT A COLLECTION OF |-->
<!--| LINKS. If you think that your link might be useful, do not add it here, |-->
<!--| but put it on this article's discussion page first or submit your link |-->
<!--| to the appropriate category at the Open Directory Project (www.dmoz.org)|-->
<!--| and link back to that category using the {{dmoz}} template. |-->
<!--| |-->
<!--| Links that have not been verified WILL BE DELETED. |-->
<!--| See [[Wikipedia:External links]] and [[Wikipedia:Spam]] for details |-->
<!--===========================({{NoMoreLinks}})===============================-->

[[Category:Computing| ]]

{{Link FA|vi}}
{{Link FA|he}}

[[af:Rekenaar]]
[[ace:Komputer]]
[[am:ኮምፒዩተር]]
[[ang:Spærcletelle]]
[[ar:حاسوب]]
[[an:Ordinador]]
[[ast:Computadora]]
[[az:Kompüter]]
[[bn:কম্পিউটার]]
[[zh-min-nan:Tiān-náu]]
[[ba:Компьютер]]
[[be:Камп'ютэр]]
[[be-x-old:Кампутар]]
[[bar:Rechna]]
[[bo:གློག་ཀླད།]]
[[bs:Računar]]
[[br:Urzhiataer]]
[[bg:Компютър]]
[[ca:Ordinador]]
[[cv:Компьютер]]
[[ceb:Kompyuter]]
[[cs:Počítač]]
[[cy:Cyfrifiadur]]
[[da:Computer]]
[[de:Computer]]
[[nv:Béésh bee akʼeʼelchíhí tʼáá bí nitsékeesígíí]]
[[et:Arvuti]]
[[el:Ηλεκτρονικός υπολογιστής]]
[[eml:Zarvlån]]
[[es:Computadora]]
[[eo:Komputilo]]
[[eu:Ordenagailu]]
[[fa:رایانه]]
[[fo:Telda]]
[[fr:Ordinateur]]
[[fy:Kompjûter]]
[[fur:Ordenadôr]]
[[ga:Ríomhaire]]
[[gv:Co-earrooder]]
[[gd:Coimpiutaireachd]]
[[gl:Ordenador]]
[[gu:કમ્પ્યૂટર]]
[[got:𐍅𐌹𐍄𐌹𐍂𐌰𐌷𐌽𐌾𐌰𐌽𐌳𐍃]]
[[hak:Thien-nó]]
[[ko:컴퓨터]]
[[ha:Na'ura]]
[[hy:Համակարգիչ]]
[[hi:अभिकलित्र]]
[[hr:Računalo]]
[[io:Ordinatro]]
[[ig:Komputa]]
[[bpy:কম্পিউটার]]
[[id:Komputer]]
[[ia:Computator]]
[[iu:ᖃᕋᓴᐅᔭᖅ/qarasaujaq]]
[[xh:Ikhompyutha]]
[[zu:Ikhompyutha]]
[[is:Tölva]]
[[it:Computer]]
[[he:מחשב]]
[[jv:Komputer]]
[[kn:ಗಣಕಯಂತ್ರ]]
[[ka:კომპიუტერი]]
[[kk:Компьютер]]
[[kw:Comptyor]]
[[sw:Tarakilishi]]
[[kg:Ludinatelo]]
[[ku:Komputer]]
[[lad:Komputer]]
[[lo:ຄອມພິວເຕີ]]
[[la:Computatrum]]
[[lv:Dators]]
[[lb:Computer]]
[[lt:Kompiuteris]]
[[li:Computer]]
[[ln:Esálela]]
[[jbo:skami]]
[[lmo:Cumpiüter]]
[[hu:Számítógép]]
[[mk:Компјутер]]
[[mg:Mpikajy]]
[[ml:കമ്പ്യൂട്ടര്‍]]
[[mt:Kompjuter]]
[[mr:संगणक विज्ञान]]
[[arz:كومبيوتر]]
[[mzn:کامپیوتر]]
[[ms:Komputer]]
[[mwl:Cumputador]]
[[mn:Компьютер]]
[[my:ကွန်ပျူတာ]]
[[nah:Chīuhpōhualhuaztli]]
[[nl:Computer]]
[[nds-nl:Komputer]]
[[ne:कम्प्युटर]]
[[new:कम्प्युटर]]
[[ja:コンピュータ]]
[[nap:Computer]]
[[no:Datamaskin]]
[[nn:Datamaskin]]
[[oc:Ordinator]]
[[mhr:Компучыр]]
[[uz:Kompyuter]]
[[pa:ਕੰਪਿਊਟਰ]]
[[pnb:کمپیوٹر]]
[[ps:سولګر]]
[[nds:Reekner]]
[[pl:Komputer]]
[[pt:Computador]]
[[ro:Computer]]
[[qu:Antañiqiq]]
[[ru:Компьютер]]
[[sah:Көмпүүтэр]]
[[sc:Computer]]
[[za:Dennauj]]
[[sco:Computer]]
[[stq:Computer]]
[[sq:Kompjuteri]]
[[scn:Computer]]
[[si:පරිගණකය]]
[[simple:Computer]]
[[sk:Počítač]]
[[cu:Съмѣтатєл҄ь]]
[[sl:Računalnik]]
[[so:Kumbuyuutar]]
[[sr:Рачунар]]
[[sh:Kompjuter]]
[[fi:Tietokone]]
[[sv:Dator]]
[[tl:Kompyuter]]
[[ta:கணினி]]
[[te:కంప్యూటరు]]
[[th:คอมพิวเตอร์]]
[[tg:Компутар]]
[[tr:Bilgisayar]]
[[tk:Kompýuter]]
[[bug:Komputer]]
[[uk:Комп'ютер]]
[[ur:شمارِندہ]]
[[vec:Computer]]
[[vi:Máy tính]]
[[wa:Copiutrece]]
[[vls:Computer]]
[[war:Kompyuter]]
[[wo:Nosukaay]]
[[wuu:计算机]]
[[yi:קאמפיוטער]]
[[zh-yue:電腦]]
[[diq:Komputer]]
[[bat-smg:Kuompioteris]]
[[zh:電子計算機]]
